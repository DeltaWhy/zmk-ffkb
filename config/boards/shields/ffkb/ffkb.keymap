#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/mouse.h>

#define DEFAULT 0
#define NAV     1
#define NUM     2
#define ADJUST  3

#define LSPO &hm LSHFT LS(N9)
#define RSPC &hm RSHFT RS(N0)

&caps_word {
    continue-list = <UNDERSCORE MINUS BACKSPACE DELETE>;
};

/ {

    combos {
        compatible = "zmk,combos";
        combo_lbrc {
            timeout-ms = <50>;
            key-positions = <4 5>;
            bindings = <&kp LS(LBKT)>;
        };
        combo_rbrc {
            timeout-ms = <50>;
            key-positions = <6 7>;
            bindings = <&kp RS(RBKT)>;
        };
        combo_lbkt {
            timeout-ms = <50>;
            key-positions = <28 29>;
            bindings = <&kp LBKT>;
        };
        combo_rbkt {
            timeout-ms = <50>;
            key-positions = <30 31>;
            bindings = <&kp RBKT>;
        };
        combo_capsword {
            timeout-ms = <50>;
            key-positions = <24 35>;
            bindings = <&caps_word>;
        };
    };

    sensors {
        compatible = "zmk,keymap-sensors";
        sensors = <&encoder_1 &encoder_2>;
    };

    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick_tap_ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };
        hs: homerow_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_SHIFT";
            #binding-cells = <2>;
            tapping-term-ms = <175>;
            quick_tap_ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };
        coln: inverted_colon {
            compatible = "zmk,behavior-mod-morph";
            label = "COLON";
            #binding-cells = <0>;
            bindings = <&kp LS(SCLN)>, <&kp SCLN>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <NAV NUM>;
            then-layer = <3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "Default";

            sensor-bindings = <&inc_dec_kp C_VOLUME_DOWN C_VOLUME_UP &inc_dec_kp C_AC_SCROLL_DOWN C_AC_SCROLL_UP>;

            bindings = <
    &kp TAB       &kp Q        &kp W        &kp F       &kp P         &kp B                                       &kp J         &kp L        &kp U         &kp Y       &kp SQT     &kp MINUS
    &hm LCTL ESC  &hm LGUI A   &hm LALT R   &hm LCTL S  &hs LSHIFT T  &kp G                                       &kp M         &hs RSHIFT N &hm RCTL E    &hm LALT I  &hm RGUI O  &coln
    LSPO          &hm RALT Z   &kp X        &kp C       &kp D         &kp V                                       &kp K         &kp H        &kp COMMA     &hm RALT DOT &kp FSLH    RSPC
                                         &none       &mo NAV       &kp SPC  &kp TAB  &kp ENTER   &kp BSPC &mo NUM      &none
            >;
        };

        nav_layer {
            label = "Navigation";
            
            sensor-bindings = <&inc_dec_kp C_VOLUME_DOWN C_VOLUME_UP &inc_dec_kp UP DOWN>;
            
            bindings = <
    &trans     &trans       &trans       &trans      &trans        &trans                                 &bt BT_CLR    &bt BT_SEL 0 &bt BT_SEL 1  &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4
    &trans     &kp LGUI     &kp LALT     &kp LCTL    &kp LSFT      &trans                                 &out OUT_BLE  &kp LEFT     &kp DOWN      &kp UP      &kp RIGHT   &msc SCROLL_UP
    &trans     &trans       &kp RALT     &trans      &trans        &trans                                 &out OUT_USB  &kp HOME     &kp PGDN      &kp PGUP    &kp END     &msc SCROLL_DOWN
                                         &trans      &trans        &trans       &trans        &trans      &trans        &trans       &trans
            >;
        };

        num_layer {
            label = "Numbers";
            
            sensor-bindings = <&inc_dec_kp C_VOLUME_DOWN C_VOLUME_UP &inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
            
            bindings = <
    &trans     &kp LBKT     &kp N7       &kp N8      &kp N9        &kp RBKT                                    &trans        &trans       &trans        &trans      &trans      &trans
    &trans     &kp SCLN     &kp N4       &kp N5      &kp N6        &kp EQL                                     &trans        &kp RSFT     &kp RCTL      &kp LALT    &kp RGUI    &trans
    &trans     &kp GRAVE    &kp N1       &kp N2      &kp N3        &kp BSLH                                    &trans        &trans       &trans        &kp RALT    &trans      &trans
                                         &trans      &trans        &kp N0       &kp DOT       &trans           &trans        &trans       &trans
            >;
        };

        adj_layer {
            label = "Adjust";
            
            sensor-bindings = <&inc_dec_kp C_VOLUME_DOWN C_VOLUME_UP &inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
            
            bindings = <
    &trans     &kp F12      &kp F7       &kp F8      &kp F9        &kp PSCRN                                   &trans        &trans       &trans        &trans      &trans      &trans
    &trans     &kp F11      &kp F4       &kp F5      &kp F6        &kp SLCK                                    &trans        &kp RSFT     &kp RCTL      &kp LALT    &kp RGUI    &trans
    &trans     &kp F10      &kp F1       &kp F2      &kp F3        &kp PAUSE_BREAK                             &trans        &trans       &trans        &kp RALT    &trans      &bootloader
                                         &trans      &trans        &trans       &trans        &trans           &trans        &trans       &trans
            >;
        };
    };
};
            /*
            bindings = <
    &trans     &trans       &trans       &trans      &trans        &trans                                      &trans        &trans       &trans        &trans      &trans      &trans
    &trans     &trans       &trans       &trans      &trans        &trans                                      &trans        &trans       &trans        &trans      &trans      &trans
    &trans     &trans       &trans       &trans      &trans        &trans                                      &trans        &trans       &trans        &trans      &trans      &trans
                                         &trans      &trans        &trans       &trans        &trans           &trans        &trans       &trans
            >;
            */
